/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : AD1.H
**     Project   : DFT_3FASES
**     Processor : MCF51QE128LQFP64
**     Beantype  : ADC
**     Version   : Bean 01.404, Driver 01.16, CPU db: 3.00.002
**     Compiler  : CodeWarrior ColdFireV1 C Compiler
**     Date/Time : 29/07/2008, 06:32 p.m.
**     Abstract  :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings  :
**         AD control register         : ADCSC1      [0xFFFF8010]
**         AD control register         : ADCCFG      [0xFFFF8016]
**         AD control register         : ADCRH       [0xFFFF8012]
**         AD control register         : ADCRL       [0xFFFF8013]
**         AD control register         : ADCCVH      [0xFFFF8014]
**         AD control register         : ADCCVL      [0xFFFF8015]
**         AD control register         : ADCSC2      [0xFFFF8011]
**         AD control register         : APCTL1      [0xFFFF8017]
**         AD control register         : APCTL2      [0xFFFF8018]
**         AD control register         : APCTL3      [0xFFFF8019]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         AD result register          : ADCres      [0xFFFF8012]
**         Interrupt name              : Vadc
**         Priority                    : 350
**         User handling procedure     : AD1_OnEnd
**         Number of conversions       : 1
**         AD resolution               : 12-bit
**
**         Input pins
**
**              Port name              : PTA
**              Bit number (in port)   : 1
**              Bit mask of the port   : 0x0002
**              Port data register     : PTAD        [0xFFFF8000]
**              Port control register  : PTADD       [0xFFFF8001]
**
**              Port name              : PTA
**              Bit number (in port)   : 6
**              Bit mask of the port   : 0x0040
**              Port data register     : PTAD        [0xFFFF8000]
**              Port control register  : PTADD       [0xFFFF8001]
**
**              Port name              : PTA
**              Bit number (in port)   : 7
**              Bit mask of the port   : 0x0080
**              Port data register     : PTAD        [0xFFFF8000]
**              Port control register  : PTADD       [0xFFFF8001]
**
**              Port name              : PTF
**              Bit number (in port)   : 6
**              Bit mask of the port   : 0x0040
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTF
**              Bit number (in port)   : 4
**              Bit mask of the port   : 0x0010
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**              Port name              : PTF
**              Bit number (in port)   : 3
**              Bit mask of the port   : 0x0008
**              Port data register     : PTFD        [0xFFFF800A]
**              Port control register  : PTFDD       [0xFFFF800B]
**
**         Initialization:
**              Conversion             : Enabled
**              Event                  : Enabled
**         High speed mode
**             Prescaler               : divide-by-2
**     Contents  :
**         Enable         - byte AD1_Enable(void);
**         Disable        - byte AD1_Disable(void);
**         EnableEvent    - byte AD1_EnableEvent(void);
**         DisableEvent   - byte AD1_DisableEvent(void);
**         Measure        - byte AD1_Measure(bool WaitForResult);
**         MeasureChan    - byte AD1_MeasureChan(bool WaitForResult, byte Channel);
**         GetValue       - byte AD1_GetValue(void* Values);
**         GetChanValue   - byte AD1_GetChanValue(byte Channel, void* Value);
**         GetValue8      - byte AD1_GetValue8(byte *Values);
**         GetChanValue8  - byte AD1_GetChanValue8(byte Channel, byte *Value);
**         GetValue16     - byte AD1_GetValue16(word *Values);
**         GetChanValue16 - byte AD1_GetChanValue16(byte Channel, word *Value);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2006
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __AD1
#define __AD1

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE AD1. */

#include "Cpu.h"




extern volatile bool AD1_EnEvent;      /* Enable/Disable events */
__interrupt void AD1_Interrupt(void);
/*
** ===================================================================
**     Method      :  AD1_Interrupt (bean ADC)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the bean.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void AD1_HWEnDi(void);
/*
** ===================================================================
**     Method      :  AD1_HWEnDi (bean ADC)
**
**     Description :
**         Enables or disables the peripheral(s) associated with the bean.
**         The method is called automatically as a part of the Enable and 
**         Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


byte AD1_Enable(void);
/*
** ===================================================================
**     Method      :  AD1_Enable (bean ADC)
**
**     Description :
**         Enables A/D converter bean. <Events> may be generated
**         (<DisableEvent>/<EnableEvent>). If possible, this method
**         switches on A/D converter device, voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte AD1_Disable(void);
/*
** ===================================================================
**     Method      :  AD1_Disable (bean ADC)
**
**     Description :
**         Disables A/D converter bean. No <events> will be
**         generated. If possible, this method switches off A/D
**         converter device, voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define AD1_EnableEvent()\
  (AD1_EnEvent = TRUE, (byte)ERR_OK)   /* Set the flag "events enabled" */
/*
** ===================================================================
**     Method      :  AD1_EnableEvent (bean ADC)
**
**     Description :
**         Enables the <events>.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define AD1_DisableEvent() (AD1_EnEvent = FALSE, (byte)ERR_OK) /* Set the flag "events enabled" */
/*
** ===================================================================
**     Method      :  AD1_DisableEvent (bean ADC)
**
**     Description :
**         Disables the <events>.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte AD1_Measure(bool WaitForResult);
/*
** ===================================================================
**     Method      :  AD1_Measure (bean ADC)
**
**     Description :
**         This method performs one measurement on all channels that
**         are set in the bean inspector. (Note: If the <number of
**         conversions> is more than one the conversion of A/D
**         channels is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result
**                           of a conversion. If <interrupt service>
**                           is disabled, A/D peripheral doesn't
**                           support measuring all channels at once
**                           or Autoscan mode property isn't enabled
**                           and at the same time the <number of
**                           channel> is greater than 1, then the
**                           WaitForResult parameter is ignored and
**                           the method waits for each result every
**                           time. If the <interrupt service> is
**                           disabled and a <number of conversions>
**                           is greater than 1, the parameter is
**                           ignored and the method also waits for
**                           each result every time.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already
**                           running
** ===================================================================
*/

byte AD1_MeasureChan(bool WaitForResult,byte Channel);
/*
** ===================================================================
**     Method      :  AD1_MeasureChan (bean ADC)
**
**     Description :
**         This method performs measurement on one channel. (Note:
**         If the <number of conversions> is more than one the
**         conversion of the A/D channel is performed specified
**         number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result
**                           of conversion. If the <interrupt service>
**                           is disabled and at the same time a
**                           <number of conversions> is greater than
**                           1, the WaitForResult parameter is
**                           ignored and the method waits for each
**                           result every time.
**         Channel         - Channel number. If only one
**                           channel in the bean is set this
**                           parameter is ignored, because the
**                           parameter is set inside this method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already
**                           running
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
** ===================================================================
*/

byte AD1_GetValue(void *Values);
/*
** ===================================================================
**     Method      :  AD1_GetValue (bean ADC)
**
**     Description :
**         Returns the last measured values for all channels. Format
**         and width of the value is a native format of the A/D
**         converter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Values          - Pointer to the array that
**                           contains the measured data. Data type is
**                           a byte, a word or an int. It depends on
**                           the supported modes, resolution, etc. of
**                           the AD converter. See the Version
**                           specific information for the current CPU
**                           in <General Info>.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun
**                           flag was detected after the last value(s)
**                           was obtained (for example by GetValue).
**                           This error may not be supported on some
**                           CPUs (see generated code).
** ===================================================================
*/

byte AD1_GetChanValue(byte Channel,void* Value);
/*
** ===================================================================
**     Method      :  AD1_GetChanValue (bean ADC)
**
**     Description :
**         Returns the last measured value of the required channel.
**         Format and width of the value is a native format of the
**         A/D converter.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the bean is set then this
**                           parameter is ignored.
**       * Value           - Pointer to the measured value. Data
**                           type is a byte, a word or an int. It
**                           depends on the supported modes,
**                           resolution, etc. of the AD converter.
**                           See the Version specific information for
**                           the current CPU in <General Info>.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun
**                           flag was detected after the last value(s)
**                           was obtained (for example by GetValue).
**                           This error may not be supported on some
**                           CPUs (see generated code).
** ===================================================================
*/

byte AD1_GetValue8(byte *Values);
/*
** ===================================================================
**     Method      :  AD1_GetValue8 (bean ADC)
**
**     Description :
**         This method returns the last measured values of all
**         channels justified to the left. Compared with <GetValue>
**         method this method returns more accurate result if the
**         <number of conversions> is greater than 1 and <AD
**         resolution> is less than 8 bits. In addition, the user
**         code dependency on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Values          - Pointer to the array that
**                           contains the measured data.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun
**                           flag was detected after the last value(s)
**                           was obtained (for example by GetValue).
**                           This error may not be supported on some
**                           CPUs (see generated code).
** ===================================================================
*/

byte AD1_GetChanValue8(byte Channel,byte *Value);
/*
** ===================================================================
**     Method      :  AD1_GetChanValue8 (bean ADC)
**
**     Description :
**         This method returns the last measured value of required
**         channel justified to the left. Compared with
**         <GetChanValue> method this method returns more accurate
**         result if the <number of conversions> is greater than 1
**         and <AD resolution> is less than 8 bits. In addition, the
**         user code dependency on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the bean is set then this
**                           parameter is ignored.
**       * Value           - Pointer to the measured value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun
**                           flag was detected after the last value(s)
**                           was obtained (for example by GetValue).
**                           This error may not be supported on some
**                           CPUs (see generated code).
** ===================================================================
*/

byte AD1_GetValue16(word *Values);
/*
** ===================================================================
**     Method      :  AD1_GetValue16 (bean ADC)
**
**     Description :
**         This method returns the last measured values of all
**         channels justified to the left. Compared with <GetValue>
**         method this method returns more accurate result if the
**         <number of conversions> is greater than 1 and <AD
**         resolution> is less than 16 bits. In addition, the user
**         code dependency on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Values          - Pointer to the array that
**                           contains the measured data.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun
**                           flag was detected after the last value(s)
**                           was obtained (for example by GetValue).
**                           This error may not be supported on some
**                           CPUs (see generated code).
** ===================================================================
*/

byte AD1_GetChanValue16(byte Channel,word *Value);
/*
** ===================================================================
**     Method      :  AD1_GetChanValue16 (bean ADC)
**
**     Description :
**         This method returns the last measured value of the
**         required channel justified to the left. Compared with
**         <GetChanValue> method this method returns more accurate
**         result if the <number of conversions> is greater than 1
**         and <AD resolution> is less than 16 bits. In addition,
**         the user code dependency on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the bean is set then this
**                           parameter is ignored.
**       * Value           - Pointer to the measured value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun
**                           flag was detected after the last value(s)
**                           was obtained (for example by GetValue).
**                           This error may not be supported on some
**                           CPUs (see generated code).
** ===================================================================
*/

void AD1_Init(void);
/*
** ===================================================================
**     Method      :  AD1_Init (bean ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean's 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/



/* END AD1. */

#endif /* ifndef __AD1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 3.00 [03.89]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/
